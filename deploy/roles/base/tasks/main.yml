---

- name: 'Install and setup zsh for root'
  ansible.builtin.include_role:
    name: zsh
  vars:
    zsh_user: 'root'
    zsh_user_home_path: '/{{ zsh_user }}'

- name: Update default locales
  ansible.builtin.command: '{{ item }}'
  with_items:
    - 'update-locale "LANG=en_US.UTF-8"'
    - 'locale-gen --purge "en_US.UTF-8"'
    - 'dpkg-reconfigure --frontend noninteractive locales'
  register: locales_result
  changed_when: locales_result.rc != 0

- name: Install build requirements
  ansible.builtin.apt:
    pkg: [
      'git', 'coreutils', 'sed', 'build-essential', 'rsync', 'lz4',
      'make', 'ninja-build', 'gettext', 'libtool', 'libtool-bin',
      'autoconf', 'automake', 'cmake', 'g++', 'pkg-config', 'unzip',
      'curl', 'doxygen'
    ]

- name: Install tuned profile
  ansible.builtin.apt:
    pkg: ['tuned', 'tuned-utils', 'tuned-utils-systemtap']
    state: present

- name: Set profile
  ansible.builtin.command: 'tuned-adm profile network-latency'
  register: profile_result
  changed_when: profile_result.rc != 0

- name: Restart server for first time
  ansible.builtin.reboot:
    connect_timeout: 60
    reboot_timeout: 60
  when: not zsh_profile_file.stat.exists

- name: Install traffic filtering packages
  ansible.builtin.apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - iptables
    - iptables-persistent
    - netfilter-persistent

- name: Iptables flush filter
  ansible.builtin.iptables:
    chain: "{{ item }}"
    flush: true
  with_items: ['INPUT', 'FORWARD', 'OUTPUT']

- name: Firewall rule - allow all loopback traffic
  ansible.builtin.iptables:
    action: append
    chain: INPUT
    in_interface: lo
    jump: ACCEPT

- name: Firewall rule - allow established connections
  ansible.builtin.iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT

- name: Firewall rule - allow port ping traffic
  ansible.builtin.iptables:
    chain: INPUT
    jump: ACCEPT
    protocol: icmp

- name: Firewall rule - allow port 22/SSH traffic
  ansible.builtin.iptables:
    chain: INPUT
    destination_port: 22
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - allow port 80/HTTP traffic
  ansible.builtin.iptables:
    chain: INPUT
    destination_port: 80
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - allow port 443/HTTPS traffic
  ansible.builtin.iptables:
    chain: INPUT
    destination_port: 443
    jump: ACCEPT
    protocol: tcp

- name: VSCode ports
  ansible.builtin.iptables:
    chain: INPUT
    destination_ports: 35555,35556,35557,35558,35559,35560
    jump: ACCEPT
    protocol: tcp

- name: Firewall rule - drop any traffic without rule
  ansible.builtin.iptables:
    chain: INPUT
    jump: DROP

- name: Save current state of the firewall in system file
  community.general.iptables_state:
    ip_version: ipv4
    table: filter
    state: saved
    path: /etc/iptables/rules.v4

- name: Harden sshd configuration
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^#?PasswordAuthentication"
      line: "PasswordAuthentication no"
    - regexp: "^#?AllowAgentForwarding"
      line: "AllowAgentForwarding no"
    - regexp: "^#?AllowTcpForwarding"
      line: "AllowTcpForwarding yes"
    - regexp: "^#?MaxAuthTries"
      line: "MaxAuthTries 5"
    - regexp: "^#?MaxSessions"
      line: "MaxSessions 5"
    - regexp: "^#?TCPKeepAlive"
      line: "TCPKeepAlive no"
    - regexp: "^#?UseDNS"
      line: "UseDNS no"
    - regexp: "^#?AllowAgentForwarding"
      line: "AllowAgentForwarding no"
    - regexp: "^AcceptEnv LANG LC_*"
      line: "# AcceptEnv LANG LC_*"

- name: Restart sshd
  ansible.builtin.systemd:
    name: sshd
    daemon_reload: true
    state: restarted

- name: Restart iptables
  ansible.builtin.systemd:
    name: netfilter-persistent
    state: restarted
